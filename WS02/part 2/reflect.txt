//==============================================
// Name:           Babak Ghafourigivi
// Student Number: 165118233
// Email:          bghafourigivi@myseneca.ca
// Section:        ZDD
// Date:           May 26, 2024
// I declare that this submission is the result of my own work and I only copied the code
// that my professor provided to complete my workshops and assignments.
// This submitted piece of work has not been shared with any other student or 3rd party content provider.
//==============================================

I was able to use the file input and output library "fstream" in this workshop, which I was fully familiar with from the previous semester. I read the file line by line using the "getline" method, saving the value in a string variable. I read the same file twice, specifically this time, using the "seekg" function. This is because the file position indication would have reached the end of the file if the file had first been read in order to count all of the lines in the file. For this reason, in order to read the same file again, I had to move the file position indicator to the beginning. Moreover, I used the newly learned "chrono" library to measure the time it took for my function to be implemented.

This workshop's implementation of move semantics was its most intriguing feature. Unlike to what its name suggests, a "move()" function does not really move a value. Its sole purpose is to alter the rvalue. Next, the move constructor I built moves the value that was altered to rvalue. The move constructor can be implemented by using "&&" as a reference. Copy semantics is more slower than move semantics, which takes rvalue as a reference. This is due to the fact that the copy constructor deep copies each and every piece of data while preserving the original data. Nonetheless, the address value of the original data is passed to the transfer constructor. As a result, the moving constructor is fast in terms of speed because unlike the copy constructor, it does not reallocate memory.