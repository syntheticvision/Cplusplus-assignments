//==============================================
// Name:           Babak Ghafourigivi
// Student Number: 165118233
// Email:          bghafourigivi@myseneca.ca
// Section:        ZDD
// Date:           July 14, 2024
// I declare that this submission is the result of my own work and I only copied the code
// that my professor provided to complete my workshops and assignments.
// This submitted piece of work has not been shared with any other student or 3rd party content provider.
//==============================================

Using STL algorithms like `std::sort` and `std::copy_if` made tackling Bakery module tasks a bit easier. This handled sorting, filtering, and combining collections smoothly. 
For instance, in `sortBakery()`, `std::sort` was perfect for arranging items by price without doing it many times manually. 
STL's algorithms is very efficient and comes in handy because they're optimized, easy to read, and fit well into the flow of my code. 
They're like having a toolbox of shortcuts that just work, saving me time and energy in complex software projects.
Like the code below that is sorting the result based on the price in ascending order:
void sortBakery(const std::string& field) {
    std::sort(goods.begin(), goods.end(), [](const BakedGood& a, const BakedGood& b) {
        return a.price < b.price;
    });
}

By embracing STL algorithms, I've enhanced my coding practices, having better standardized solution that are quick and intuitive, ultimately contributing to more robust and maintainable code.